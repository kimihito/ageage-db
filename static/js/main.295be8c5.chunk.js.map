{"version":3,"sources":["components/Header.tsx","components/RestaurantList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","AppBar","position","Container","maxWidth","Toolbar","Typography","variant","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","RestaurantList","Box","m","Grid","xs","columns","title","field","data","restaurants","options","sorting","filtering","pageSize","pageSizeOptions","Link","href","target","rel","icons","App","useState","setRestaurants","useEffect","a","axios","result","nestedRestaurants","episodes","map","e","r","episode","concat","fetchData","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.295be8c5.chunk.js","sourcesContent":["import React from 'react'\nimport { AppBar, Container, Typography, Toolbar } from '@material-ui/core'\n\nconst Header = () => {\n    return (\n        <AppBar position=\"static\">\n            <Container maxWidth=\"lg\">\n                <Toolbar>\n                    <Typography variant=\"h6\">Ageage-db</Typography>\n                </Toolbar>\n            </Container>\n        </AppBar>\n    )\n}\n\nexport default Header","import React from 'react'\nimport { RestaurantWithEpisode } from '../entities'\nimport MaterialTable from 'material-table'\nimport { Container, Typography, Box, Link,  Grid } from '@material-ui/core'\n\nimport { forwardRef } from 'react';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nconst tableIcons = {\n  Add: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref:React.Ref<SVGSVGElement>) => <ViewColumn {...props} ref={ref} />)\n};\n\ninterface Props {\n    restaurants: RestaurantWithEpisode[]\n}\n\nconst RestaurantList = (props: Props) => {\n    return (\n        <Box m={1}>\n            <Container maxWidth=\"lg\">\n                <Grid xs={12}>\n                    <MaterialTable\n                        columns={[\n                            {title: 'テーマ', field: 'episode.theme'},\n                            {title: '店名', field: 'name'},\n                            {title: '住所', field: 'address'},\n                            {title: '営業時間', field: 'open'},\n                            {title: '定休日', field: 'close'},\n                        ]}\n                        data={props.restaurants}\n                        options={{\n                            sorting: true,\n                            filtering: true,\n                            pageSize: 20,\n                            pageSizeOptions: [20, 50, 100]\n                        }}\n                        title={\n                            <Typography>\n                            <Link href=\"https://www.otv.co.jp/ageage/\" target=\"_blank\" rel=\"noopener\">\n                                アゲアゲ飯\n                            </Link>\n                            で紹介されたお店をテーマごとに検索します\n                            </Typography>\n                        }\n                        icons={tableIcons}\n                    >\n\n                    </MaterialTable>\n                </Grid>\n            </Container>\n        </Box>\n    )\n}\n\nexport default RestaurantList","import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport { Episode, Restaurant, RestaurantWithEpisode } from './entities'\nimport Header from './components/Header'\nimport RestaurantList from './components/RestaurantList'\nimport './App.css';\n\nconst App: React.FC = () => {\n\n  const [restaurants, setRestaurants] = useState<RestaurantWithEpisode[]>([])\n  useEffect(() => {\n    const fetchData = async() => {\n      const result = await axios(\"https://kimihito.github.io/ageage-db/db.json\")\n      const nestedRestaurants: RestaurantWithEpisode[] = result.data.episodes.map((e: Episode) => {\n        const restaurantsWithEpisode: RestaurantWithEpisode[] = e.restaurants.map((r: Restaurant) => {\n          delete e.restaurants\n          return { episode: e, ...r }\n        })\n        return restaurantsWithEpisode\n      })\n      setRestaurants(([] as RestaurantWithEpisode[]).concat(...nestedRestaurants))\n    }\n\n    fetchData()\n  }, [])\n\n\n  return (\n    <React.Fragment>\n      <Header />\n      <RestaurantList restaurants={restaurants} />\n    </React.Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}